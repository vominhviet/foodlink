const pool = require('../config/db');

async function initDatabase() {
  // ƒê·∫£m b·∫£o b·∫£ng invoices c√≥ tr∆∞·ªùng seller v√† ki·ªÉu created_at ƒë√∫ng
  await pool.query(`ALTER TABLE invoices ADD COLUMN IF NOT EXISTS seller VARCHAR(100);`);
  await pool.query(`ALTER TABLE invoices ALTER COLUMN created_at TYPE TIMESTAMP USING created_at::timestamp;`);
  try {
    console.log('üîÑ Initializing database tables...');

    // T·∫°o b·∫£ng users
    await pool.query(`
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        username VARCHAR(50) UNIQUE NOT NULL,
        password VARCHAR(255) NOT NULL,
        email VARCHAR(100) UNIQUE,
        full_name VARCHAR(100),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // T·∫°o b·∫£ng products
    await pool.query(`
      CREATE TABLE IF NOT EXISTS products (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        price DECIMAL(10, 2) NOT NULL,
        stock INTEGER DEFAULT 0,
        description TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // T·∫°o b·∫£ng customers
    await pool.query(`
      CREATE TABLE IF NOT EXISTS customers (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        phone VARCHAR(20),
        email VARCHAR(100),
        address TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // T·∫°o b·∫£ng invoices
    await pool.query(`
      CREATE TABLE IF NOT EXISTS invoices (
        id SERIAL PRIMARY KEY,
        invoice_number VARCHAR(50) UNIQUE NOT NULL,
        customer_id INTEGER REFERENCES customers(id),
        user_id INTEGER REFERENCES users(id),
        items JSONB NOT NULL,
        total_amount DECIMAL(12, 2) NOT NULL,
        status VARCHAR(20) DEFAULT 'pending',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // T·∫°o b·∫£ng history
    await pool.query(`
      CREATE TABLE IF NOT EXISTS history (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id),
        action_type VARCHAR(50) NOT NULL,
        description TEXT,
        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);

    console.log('‚úÖ Database tables created successfully!');

    // Ch√®n d·ªØ li·ªáu m·∫´u v√†o products
    await pool.query(`
      INSERT INTO products (name, price, stock, description) 
      VALUES 
      ('iPhone 15 Pro', 25000000, 50, 'ƒêi·ªán tho·∫°i iPhone 15 Pro 128GB'),
      ('Samsung Galaxy S23', 18000000, 30, 'ƒêi·ªán tho·∫°i Samsung Galaxy S23'),
      ('MacBook Pro M2', 42000000, 20, 'Laptop MacBook Pro 14 inch M2')
      ON CONFLICT DO NOTHING
    `);

    // Ch√®n d·ªØ li·ªáu m·∫´u v√†o customers
    await pool.query(`
      INSERT INTO customers (name, phone, email, address) 
      VALUES 
      ('Nguy·ªÖn VƒÉn A', '0912345678', 'nguyenvana@email.com', 'H√† N·ªôi'),
      ('Tr·∫ßn Th·ªã B', '0987654321', 'tranthib@email.com', 'TP.HCM'),
      ('L√™ VƒÉn C', '0909123456', 'levanc@email.com', 'ƒê√† N·∫µng')
      ON CONFLICT DO NOTHING
    `);

    console.log('‚úÖ Sample data inserted successfully!');

  } catch (error) {
    console.error('‚ùå Error initializing database:', error);
  }
}

module.exports = initDatabase;